arena ::= struct
{
	ptr : v0?;
	cap : u64;
	cur : u64;
};

ARENA_ADDR_RESERVE ::= 8000000000;
static if(_win32)
{
	VirtualAlloc ::= func(lpAddress : v0?, dwSize : u64, flAllocationType : s64, flProtect : s64 -> v0?) := extern;
	VirtualFree ::= func(lpAddress : v0?, dwSize : u64, dwFreeType : s64 -> v0) := extern;
	MEM_RESERVE ::= 8192;
	MEM_COMMIT ::= 4096;
	MEM_RELEASE ::= 32768;
	PAGE_READWRITE ::= 4;
}
else
{
	MAP_PRIVATE ::= 0x02;
	MAP_ANONYMOUS ::= 0x20;
	PROT_NONE ::= 0x00;
	PROT_READ ::= 0x01;
	PROT_WRITE ::= 0x02;
	PROT_EXEC ::= 0x04;
}

arena_create ::= func(initial_cap : u64 -> arena)
{
	static if(_win32)
	{
		ptr ::= VirtualAlloc(zero, ARENA_ADDR_RESERVE, MEM_RESERVE, PAGE_READWRITE);
		VirtualAlloc(ptr, initial_cap, MEM_COMMIT, PAGE_READWRITE);
		return arena
		{
			.ptr := ptr;
			.cap := initial_cap;
			.cur := 0;
		};
	}
	else
	{
		ptr ::= mmap(zero, ARENA_ADDR_RESERVE, PROT_NONE, MAP_PRIVATE | MAP_ANONYMOUS, zero, zero);
		if(mprotect(ptr, initial_cap, PROT_WRITE | PROT_READ) != 0)
		{
			putzstr("failed to mprotect");
		}
		return arena
		{
			.ptr := ptr;
			.cap := initial_cap;
			.cur := 0;
		};
	}

};

arena_destroy ::= func(a : arena mut? -> v0)
{
	static if(_win32)
	{
		VirtualFree(a->ptr, 0, MEM_RELEASE);
	}
	else
	{
		munmap(a->ptr, ARENA_ADDR_RESERVE);
	}
	deref a = zero;
};

_arena_dub ::= func(a : arena mut? -> v0)
{
	if(a->cap == 0)
	{
		a->cap = 4096;
	}
	// need to increase size. let's double the cap.
	byteptr ::= (a->ptr)@u8?;
	offset ::= byteptr # (a->cap);
	static if(_win32)
	{
		VirtualAlloc(offset@_, a->cap, MEM_COMMIT, PAGE_READWRITE);
	}
	else
	{
		mprotect(a->ptr, a->cap * 2, PROT_WRITE | PROT_READ);
	}
	(a->cap) = (a->cap) * 2;
};

arena_alloc ::= func(a : arena mut?, size : u64 -> v0? weak)
{
	while(((a->cur) + size) > (a->cap))
	{
		_arena_dub(a);
	}

	addr ::= (a->ptr)@u64 mut;
	addr = addr + (a->cur);
	(a->cur) = (a->cur) + size;
	return addr@_;
};

arena_clear ::= func(a : arena mut? -> v0)
{
	a->cur = 0;
};
