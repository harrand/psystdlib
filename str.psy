zstrlen ::= func(zstr : u8? -> u64)
{
	ptr : u8? mut := zstr;
	i : u64 mut := 0;
	while(deref ptr != 0)
	{
		ptr = ptr # 1;
		i = i + 1;
	}
	return i;
};

sstr ::= struct
{
	ptr : u8?;
	len : u64;
};

sstr2zstr ::= func(s : sstr, a : arena mut? -> u8?)
{
	ret : u8 mut? := arena_alloc(a, s.len + 1);
	memcopy(ret, s.ptr, s.len);
	deref(ret # (s.len)) = 0;
	return ret;
};

zstr2sstr ::= func(zstr : u8? -> sstr)
{
	return sstr
	{
		.ptr := zstr;
		.len := zstrlen(zstr);
	};
};

strcpy_n ::= func(dst : u8 mut?, src : u8?, len : u64 -> v0)
{
	i : u64 mut;
	for(i = 0, i < len, i = i + 1)
	{
		deref(dst # i) = deref(src # i);
	}
};

streql_n ::= func(l : u8?, r : u8?, len : u64 -> bool)
{
	i : u64 mut;
	for(i = 0, i < len, i = i + 1)
	{
		if(deref(l # i) != deref(r # i))
		{
			return false;
		}
	}
	return true;
};

str_starts_with_n ::= func(str : u8?, needle : u8?, len : u64 -> bool)
{
	i : u64 mut;
	for(i = 0, i < len, i = i + 1)
	{
		if(deref(str # i) != deref(needle # i))
		{
			return false;
		}
	}
	return true;
};

zstr_starts_with ::= func(str : u8?, needle : u8? -> bool)
{
	len : u64 mut := zstrlen(str);
	len2 ::= zstrlen(needle);
	if(len2 > len)
	{
		// substring is larger, so it cant contain it.
		return false;
	}
	if(len2 < len)
	{
		len = len2;
	}
	return str_starts_with_n(str, needle, len);
};

zstreql ::= func(lhs : u8?, rhs : u8? -> bool)
{
	llen ::= zstrlen(lhs);
	rlen ::= zstrlen(rhs);
	if(llen != rlen)
	{
		return false;
	}
	min : u64 mut := rlen;
	if(llen < rlen)
	{
		min = llen;
	}
	return streql_n(lhs, rhs, min);
};
