pi : f64 static := 3.14159;
pihalf : f64 static := 1.57079;
tau : f64 static := 6.28319;
e : f64 static := 2.71828;

fabs ::= func(x : f64 -> f64)
{
	if(x < 0.0)
	{
		return -x;
	}
	return x;
};

abs ::= func(x : s64 -> s64)
{
	if(x < 0)
	{
		return -x;
	}
	return x;
};

floor ::= func(x : f64 -> f64)
{
	i ::= x@s64;
    if ((x < 0.0) && (i@f64 != x))
	{
		return (i - 1)@f64;
    }
	return i@f64;
};

sin_maclaurin ::= func(x : f64, terms : u64 -> f64)
{
	term : f64 mut := x;
	sum : f64 mut := term;
	n : u64 mut;
	for(n = 1, n < terms, n = n + 1)
	{
		term = term * (-x * x / ((2 * n) * (2 * n + 1)));
		sum = sum + term;
	}

	return sum;
};

sin ::= func(v : f64 weak -> f64 weak)
{
	mul ::= (v / tau)@s32;
	if((mul >= 1) || (mul <= -1))
	{
		return sin_maclaurin(v - (mul@f64 * tau), 10);
	}
	return sin_maclaurin(v, 10);
};

cos_maclaurin ::= func(x : f64, terms : u64 -> f64)
{
	term : f64 mut := 1.0;
	sum : f64 mut := term;
	n : u64 mut;
	for(n = 1, n < terms, n = n + 1)
	{
		term = term * (-x * x / ((2 * n - 1) * (2 * n)));
		sum = sum + term;
	}
	return sum;
};

cos ::= func(v : f64 weak -> f64 weak)
{
	mul ::= (v / tau)@s32;
	if((mul >= 1) || (mul <= -1))
	{
		return cos_maclaurin(v - (mul@f64 * tau), 10);
	}
	return cos_maclaurin(v, 10);
};

tan ::= func(f : f64 -> f64)
{
	return sin(f) / cos(f);
};

msb ::= func(i : u64 -> u64)
{
	r : u64 mut := 0;
	v : u64 mut := i;
	while(v > 0)
	{
		v = v >> 1;
		r = r + 1;
	}
	return r;
};

log ::= func(f : f64 -> f64)
{
	if(f < 0.0)
	{
		return 0.0;
	}
	if((f > 0.0) && (f < 1.0))
	{
		// this is a very silly and crude approximation. massive grain of salt here as this region is highly nonlinear
		return (-1.0 + f) * 1.7;
	}
	if(f < 2.0)
	{
		return -1.7417939 + (2.8212026 + (-1.4699568 + (0.44717955 - 0.056570851 * f) * f) * f) * f;	
	}
	log2 : s64 mut;
	divisor : f64 mut;
	x : f64 mut;
	result : f64 mut;

	log2 = (msb(f@_) - 1)@_;
	divisor = (1 << log2)@f64;

	x = f / divisor;    // normalized value between [1.0, 2.0]

    result = -1.7417939 + (2.8212026 + (-1.4699568 + (0.44717955 - 0.056570851 * x) * x) * x) * x;
    result = result + ((log2@f64) * 0.69314718); // ln(2) = 0.69314718

	return result;
};
