GetFileAttributesA ::= func(lpFileName : u8& -> u32) := extern;
CreateFileA ::= func(
	lpFileName : u8&,
	dwDesiredAccess : u32,
	dwShareMode : u32,
	lpSecurityAttributes : u64,
	dwCreationDisposition : u32,
	dwFlagsAndAttributes : u32,
	hTemplateFile : u64
	-> u64) := extern;
GetFileSizeEx ::= func(hFile : u64, lpFileSize : s64 mut& -> s32) := extern;
CloseHandle ::= func(hObject : u64 -> s32) := extern;
ReadFile ::= func(
	hFile : u64,
	lpBuffer : u8 mut&,
	nNumberOfBytesToRead : u32,
	lpNumberOfBytesRead : u32 mut&,
	lpOverlapped : u64
	-> s32) := extern;
WriteFile ::= func(
	hFile : u64,
	lpBuffer : u8&,
	nNumberOfBytesToWrite : u32,
	lpNumberOfBytesWritten : u32 mut&,
	lpOverlapped : u64
	-> s32) := extern;
DeleteFileA ::= func(lpFileName : u8& -> s32) := extern;
CreateDirectoryA ::= func(lpPathName : u8&, lpSecurityAttributes : u64 -> s32) := extern;

SHFILEOPSTRUCTA ::= struct
{
	hwnd : u64;
	wFunc : u32;
	pFrom : u8&;
	pTo : u8&;
	fFlags : s32;
	fAnyOperationsAborted : s32;
	hNameMappings : v0&;
	lpszProgressTitle : u8&;
};

SHFileOperationA ::= func(lpFileOp : SHFILEOPSTRUCTA& -> s32) := extern;

FILETIME ::= struct
{
	dwLowDateTime : u32;
	dwHighDateTime : u32;
};

WIN32_FIND_DATAA ::= struct
{
	dwFileAttributes : u32;
	ftCreationTime : FILETIME;
	ftLastAccessTime : FILETIME;
	ftLastWriteTime : FILETIME;
	nFileSizeHigh : u32;
	nFileSizeLow : u32;
	dwReserved0 : u32;
	dwReserved1 : u32;
	cFileName : u8[260];
	cAlternateFileName : u8[14];
	dwFileType : u32;
	dwCreatorType : u32;
	wFinderFlags : u32;
};

FindFirstFileA ::= func(lpFileName : u8&, lpFindFileData : WIN32_FIND_DATAA mut& -> u64) := extern;
FindNextFileA ::= func(hFindFile : u64, lpFindFileData : WIN32_FIND_DATAA mut& -> s32) := extern;
FindClose ::= func(hFindFile : u64 -> s32) := extern;

file_exists ::= func(path_zstr : u8& -> bool)
{
	file_attribs ::= GetFileAttributesA(path_zstr);
	return file_attribs != -1;
};

file_size_bytes ::= func(path : u8& -> u64)
{
	// CreateFile in this context is cheap, don't worry.
	handle ::= CreateFileA(path, 2147483648, 3, 0, 3, 128, 0);
	if(handle == -1)
	{
		// probably file didnt exist.
		return 0;
	}

	size : s64 mut;
	if(GetFileSizeEx(handle, ref size) == 0)
	{
		// failed for some reason.
		CloseHandle(handle);
		return 0;
	}
	CloseHandle(handle);
	return size@_;
};

file_read ::= func(path : u8&, buf : u8 mut&, buflen : u64 -> v0)
{
	handle ::= CreateFileA(path, 2147483648, 3, 0, 3, 128, 0);
	if(handle == -1)
	{
		return;
	}

	CloseHandle(handle);
	ReadFile(handle, buf, buflen@_, zero, 0);
};

file_write ::= func(path : u8&, buf : u8&, buflen : u64 -> v0)
{
	handle ::= CreateFileA(path, 1073741824, 3, 0, 3, 128, 0);
	defer CloseHandle(handle);
	if(handle == -1)
	{
		return;
	}

	WriteFile(handle, buf, buflen@_, zero, 0);
};

file_create ::= func(path : u8& -> bool)
{
	handle ::= CreateFileA(path, 1073741824, 3, 0, 1, 128, 0);
	if(handle == -1)
	{
		return false;
	}
	CloseHandle(handle);
	return true;
};

file_delete ::= func(path : u8& -> bool)
{
	return DeleteFileA(path) != 0;
};
