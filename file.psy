static if(_win32)
{
	GetFileAttributesA ::= func(lpFileName : u8? -> u32) := extern;
	CreateFileA ::= func(
		lpFileName : u8?,
		dwDesiredAccess : u32,
		dwShareMode : u32,
		lpSecurityAttributes : u64,
		dwCreationDisposition : u32,
		dwFlagsAndAttributes : u32,
		hTemplateFile : u64
		-> u64) := extern;
	GetFileSizeEx ::= func(hFile : u64, lpFileSize : s64 mut? -> s32) := extern;
	CloseHandle ::= func(hObject : u64 -> s32) := extern;
	ReadFile ::= func(
		hFile : u64,
		lpBuffer : u8 mut?,
		nNumberOfBytesToRead : u32,
		lpNumberOfBytesRead : u32 mut?,
		lpOverlapped : u64
		-> s32) := extern;
	WriteFile ::= func(
		hFile : u64,
		lpBuffer : u8?,
		nNumberOfBytesToWrite : u32,
		lpNumberOfBytesWritten : u32 mut?,
		lpOverlapped : u64
		-> s32) := extern;
	DeleteFileA ::= func(lpFileName : u8? -> s32) := extern;
	CreateDirectoryA ::= func(lpPathName : u8?, lpSecurityAttributes : u64 -> s32) := extern;

	SHFILEOPSTRUCTA ::= struct
	{
		hwnd : u64;
		wFunc : u32;
		pFrom : u8?;
		pTo : u8?;
		fFlags : s32;
		fAnyOperationsAborted : s32;
		hNameMappings : v0?;
		lpszProgressTitle : u8?;
	};

	// Shell32.lib
	SHFileOperationA ::= func(lpFileOp : SHFILEOPSTRUCTA? -> s32) := extern;

	FILETIME ::= struct
	{
		dwLowDateTime : u32;
		dwHighDateTime : u32;
	};

	WIN32_FIND_DATAA ::= struct
	{
		dwFileAttributes : u32;
		ftCreationTime : FILETIME;
		ftLastAccessTime : FILETIME;
		ftLastWriteTime : FILETIME;
		nFileSizeHigh : u32;
		nFileSizeLow : u32;
		dwReserved0 : u32;
		dwReserved1 : u32;
		cFileName : u8[260];
		cAlternateFileName : u8[14];
		dwFileType : u32;
		dwCreatorType : u32;
		wFinderFlags : u32;
	};

	FindFirstFileA ::= func(lpFileName : u8?, lpFindFileData : WIN32_FIND_DATAA mut? -> u64) := extern;
	FindNextFileA ::= func(hFindFile : u64, lpFindFileData : WIN32_FIND_DATAA mut? -> s32) := extern;
	FindClose ::= func(hFindFile : u64 -> s32) := extern;
}
else
{
	stat_t ::= struct
	{
		st_dev : u64;
		st_ino : u64;
		st_mode : u32;
		mypad : u32;
		st_nlink : u64;
		st_uid : u32;
		st_gid : u32;
		st_rdev : u64;

		st_size : s64;
		st_blksize : s64;
		st_blocks : s64;

		st_atim : timespec;
		pad0 : u32;
		st_mtim : timespec;
		pad1 : u32;
		st_ctim : timespec;
		pad2 : u32;

		pad3 : u64;
		pad4 : u64;
	};

	dirent ::= struct
	{
		d_ino : u64;
		d_off : s64;
		d_reclen : u16;
		d_name : u8[256];
	};

	DIR ::= struct
	{
		tell : u64;
		fd : s32;
		buf_pos : s32;
		buf_end : s32;
		lock : s32[1];
		buf : u8[2048];
	};

	F_OK ::= 0;
	O_RDONLY ::= 0;
	O_WRONLY ::= 1;
	O_CREAT ::= 64;
	O_TRUNC ::= 512;
	O_DIRECTORY ::= 65536;
	O_CLOEXEC ::= 524288;
}

file_exists ::= func(path_zstr : u8? -> bool)
{
	static if(_win32)
	{
		handle ::= CreateFileA(path_zstr, 2147483648, 3, 0, 3, 128, 0);
		if(handle == -1)
		{
			return false;
		}
		CloseHandle(handle);
		return true;
	}
	else
	{
		return access(path_zstr, F_OK) == 0;
	}
};

file_size_bytes ::= func(path : u8? -> u64)
{
	static if(_win32)
	{
		// CreateFile in this context is cheap, don't worry.
		handle ::= CreateFileA(path, 2147483648, 3, 0, 3, 128, 0);
		if(handle == -1)
		{
			// probably file didnt exist.
			return 0;
		}

		size : s64 mut;
		if(GetFileSizeEx(handle, ref size) == 0)
		{
			// failed for some reason.
			CloseHandle(handle);
			return 0;
		}
		CloseHandle(handle);
		return size@_;
	}
	else
	{
		sb : stat_t mut;
		stat(path, ref sb);
		ret : u64 weak := sb.st_size;
		return ret;
	}
};

file_read ::= func(path : u8?, buf : u8 mut?, buflen : u64 -> v0)
{
	static if(_win32)
	{
		handle ::= CreateFileA(path, 2147483648, 3, 0, 3, 128, 0);
		if(handle == -1)
		{
			return;
		}

		defer CloseHandle(handle);
		ReadFile(handle, buf, buflen@_, zero, 0);
	}
	else
	{
		fd ::= open(path, O_RDONLY, 0);
		defer close(fd);
		if(fd < 0)
		{
			// bad
			return;
		}
		read(fd, buf, buflen);
	}
};

file_write ::= func(path : u8?, buf : u8?, buflen : u64 -> v0)
{
	static if(_win32)
	{
		handle ::= CreateFileA(path, 1073741824, 3, 0, 3, 128, 0);
		defer CloseHandle(handle);
		if(handle == -1)
		{
			return;
		}

		WriteFile(handle, buf, buflen@_, zero, 0);
	}
	else
	{
		fd ::= open(path, O_WRONLY | O_CREAT | O_TRUNC, 420);
		defer close(fd);
		if(fd < 0)
		{
			return;
		}

		write(fd, buf, buflen);
	}
};

file_create ::= func(path : u8? -> bool)
{
	static if(_win32)
	{
		handle ::= CreateFileA(path, 1073741824, 3, 0, 1, 128, 0);
		if(handle == -1)
		{
			return false;
		}
		CloseHandle(handle);
		return true;
	}
	else
	{

		fd ::= open(path, O_WRONLY | O_CREAT | O_TRUNC, 420);
		if(fd < 0)
		{
			return false;
		}
		close(fd);
		return true;
	}
};

file_delete ::= func(path : u8? -> bool)
{
	static if(_win32)
	{
		return DeleteFileA(path) != 0;
	}
	else
	{
		return unlink(path) == 0;
	}
};

directory_exists ::= func(path : u8? -> bool)
{
	static if(_win32)
	{
		attr ::= GetFileAttributesA(path);
		if(attr == 0xffffffff)
		{
			return false;
		}
		if((attr & 16) != zero)
		{
			return true;
		}
		return false;
	}
	else
	{
		if(access(path, F_OK) != 0)
		{
			return false;
		}
		dir : DIR mut;
		if(!opendir(path, ref dir))
		{
			return false;
		}
		closedir(ref dir);
		return true;
	}
};

directory_create ::= func(path : u8? -> bool)
{
	static if(_win32)
	{
		return CreateDirectoryA(path, 0) != 0;
	}
	else
	{
		return mkdir(path, 511) == 0;
	}
};

directory_delete ::= func(path : u8?, a : arena mut? -> bool)
{
	static if(_win32)
	{
		// note: pFrom must be *double* null terminated.
		// pain.
		strlen ::= zstrlen(path);
		pathbuf : u8 mut? := arena_alloc(a, strlen + 2);
		strcpy_n(pathbuf, path, strlen);
		deref(pathbuf # strlen) = 0;
		deref(pathbuf # (strlen + 1)) = 0;

		file_op ::= SHFILEOPSTRUCTA
		{
			.hwnd := 0;
			.wFunc := 3;
			.pFrom := pathbuf;
			.pTo := "";
			.fFlags := 0x0414;
			.fAnyOperationsAborted := 0;
			.hNameMappings := zero;
			.lpszProgressTitle := "";

		};
		return SHFileOperationA(ref file_op) == 0;
	}
	else
	{
		pathlen ::= zstrlen(path);
		dir : DIR mut;
		if(!opendir(path, ref dir))
		{
			return false;
		}
		defer closedir(ref dir);
		entry : dirent? mut := readdir(ref dir);
		while(entry != zero)
		{
			name ::= entry->d_name;
			if(!streql_n(name # 0, ".", 1) && !streql_n(name # 0, "..", 2))
			{
				entry_path_len ::= pathlen + 1 + zstrlen(name # 0);
				entry_path : u8 mut? := arena_alloc(a, entry_path_len + 1);
				memcopy(entry_path, path, pathlen);
				deref(entry_path # pathlen) = '/';
				memcopy(entry_path # (pathlen + 1), name # 0, zstrlen(name # 0));

				stat_buf : stat_t mut;
				stat(entry_path, ref stat_buf);
				S_IFMT ::= 0xF0000;
				S_IFDIR ::= 0x40000;
				if((stat_buf.st_mode & S_IFMT) == S_IFDIR)
				{
					if(!directory_delete(entry_path, a))
					{
						return false;
					}
				}
				else
				{
					unlink(entry_path);
				}
			}
			entry = readdir(ref dir);
		}
		return rmdir(path) == 0;
	}
};

static if(_win32)
{
	_dir_iter ::= func(find : WIN32_FIND_DATAA mut?, callback : func(path : u8? -> v0) -> v0)
	{
		if(!streql_n(find->cFileName # 0, ".", 1) && !streql_n(find->cFileName # 0, "..", 2))
		{
			callback(find->cFileName # 0);
		}
	};
}

directory_iterate ::= func(path : u8?, callback : func(path : u8? -> v0), a : arena mut? -> v0)
{
	static if(_win32)
	{
		// we're given a directory name
		// we want to search dirname/*
		bufsize : u64 mut;
		bufsize = zstrlen(path) + 2;
		buf : u8 mut? mut;
		buf = arena_alloc(a, bufsize);
		strcpy_n(buf, path, bufsize - 2);
		deref(buf # (bufsize - 2)) = '/';
		deref(buf # (bufsize - 1)) = '*';

		find : WIN32_FIND_DATAA mut;
		handle : u64 mut;
		handle = FindFirstFileA(buf, ref find);
		if(handle == -1)
		{
			return;
		}
		_dir_iter(ref find, callback);
		while(FindNextFileA(handle, ref find) != 0)
		{
			_dir_iter(ref find, callback);
		}
		FindClose(handle);
	}
	else
	{
		dir : DIR mut;
		if(!opendir(path, ref dir))
		{
			return;
		}
		defer closedir(ref dir);
		entry : dirent? mut := readdir(ref dir);
		while(entry != zero)
		{
			name ::= entry->d_name;
			if(!streql_n(name # 0, ".", 1) && !streql_n(name # 0, "..", 2))
			{
				callback(name # 0);
			}
			entry = readdir(ref dir);
		}
	}
};


static if(_win32)
{
	GetCurrentDirectoryA ::= func(nBufferLength : u32, lpBuffer : u8 mut? -> u32) := extern;
	SetCurrentDirectoryA ::= func(lpPathName : u8? -> s32 ):= extern;
}
else
{
}

directory_get_cwd ::= func(dirname : u8? mut?, dirname_len : u64 mut?, a : arena mut? -> v0)
{
	static if(_win32)
	{
		deref(dirname_len) = GetCurrentDirectoryA(0, zero)@_;
		deref(dirname) = arena_alloc(a, deref dirname_len);
		GetCurrentDirectoryA(deref(dirname_len)@_, deref dirname);
	}
	else
	{
		PATH_MAX ::= 4096;
		deref(dirname) = arena_alloc(a, PATH_MAX);
		getcwd(deref dirname, PATH_MAX);
		deref(dirname_len) = (zstrlen(deref dirname)@_);
	}
};

directory_set_cwdz ::= func(dirname_zstr : u8? -> v0)
{
	static if(_win32)
	{
		SetCurrentDirectoryA(dirname_zstr);
	}
	else
	{
		chdir(dirname_zstr);
	}
};

directory_set_cwd ::= func(dirname : u8?, dirname_len : u64, a : arena mut? -> v0)
{
	zstr ::= sstr2zstr(dirname, dirname_len, a);
	directory_set_cwdz(zstr);
};
