cstrlen ::= func(cstr : u8&) -> u64
{
	c : u64 mut := 0;
	if(cstr == null)
	{
		return c;
	}
	while((deref (cstr at c)) != 0)
	{
		c = c + 1;
	}
	return c;
};

strcpy ::= func(dst : u8 mut&, src : u8&, count : u64) -> v0
{
	i : u64 mut := 0;
	dstcpy : u8 mut& mut := dst;
	srccpy : u8& mut := src;
	while(i < count)
	{
		(deref dstcpy) = (deref srccpy);
		dstcpy = ((dstcpy@u64) + 1)@u8 mut& mut;
		srccpy = ((srccpy@u64) + 1)@u8& mut;
		i = i + 1;
	}
};

cstreql ::= func(lhs : u8&, rhs : u8&) -> bool
{
	llen ::= cstrlen(lhs);
	rlen ::= cstrlen(rhs);
	if(llen != rlen)
	{
		return false;
	}
	min : u64 mut := rlen;
	if(llen < rlen)
	{
		min = llen;
	}
	i : u64 mut := 0;
	lchr : u8 mut;
	rchr : u8 mut;
	while(i < min)
	{
		lchr = deref(lhs at i);
		rchr = deref(rhs at i);
		if(lchr != rchr)
		{
			return false;
		}
		i = i + 1;
	}
	return true;
};

cstr_starts_with ::= func(str : u8&, needle : u8&) -> bool
{
	len : u64 mut := cstrlen(str);
	len2 ::= cstrlen(needle);
	if(len2 > len)
	{
		// substring is larger, so it cant contain it.
		return false;
	}
	if(len2 < len)
	{
		len = len2;
	}

	i : u64 mut;
	for(i = 0, i < len, i = i + 1)
	{
		if(deref(str at i) != deref(needle at i))
		{
			return false;
		}
	}
	return true;
};

cstr_find ::= func(str : u8&, substr : u8&) -> s64
{
	sublen ::= cstrlen(substr);
	len ::= cstrlen(str);
	if(sublen > len)
	{
		return -1;
	}
	if(sublen == 0)
	{
		return 0;
	}
	i : u64 mut;
	for(i = 0, i < (len - sublen), i = i + 1)
	{
		j : u64 mut;
		for(j = 0, j < sublen, j = j + 1)
		{
			lhs ::= deref(str at (i + j));
			rhs ::= deref(substr at j);
			if(lhs != rhs)
			{
				// break out of loop as we dont have a match.
				j = sublen;
			}
			if(lhs == rhs)
			{
				if(j == (sublen - 1))
				{
					// we matched the whole thing.
					return i@_;
				}
			}
		}
	}
	return -1;
};
