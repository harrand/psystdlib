arena ::= struct
{
	ptr : v0&;
	cap : u64;
	cursor : u64;
};

if static(__is_windows)
{
	VirtualAlloc ::= func(lpAddress : v0&, dwSize : u64, flAllocationType : s64, flProtect : s64) -> v0& := extern;
	VirtualFree ::= func(lpAddress : v0&, dwSize : u64, dwFreeType : s64) -> v0 := extern;
	ARENA_ADDR_RESERVE ::= 8000000000;
	MEM_RESERVE ::= 8192;
	MEM_COMMIT ::= 4096;
	MEM_RELEASE ::= 32768;
	PAGE_READWRITE ::= 4;
}

arena_create ::= func(initial_capacity : u64) -> arena
{
	if static(__is_windows)
	{
		ptr ::= VirtualAlloc(null, ARENA_ADDR_RESERVE, MEM_RESERVE, PAGE_READWRITE);
		VirtualAlloc(ptr, initial_capacity, MEM_COMMIT, PAGE_READWRITE);
		return arena{.ptr := ptr; .cap := initial_capacity; .cursor := 0;};
	}
	if static(__is_linux)
	{
		__error("arena_create linux support NYI");
	}
};

[[private]]
_arena_double_capacity ::= func(a : arena mut&) -> v0
{
	if static(__is_windows)
	{
		// need to increase size. let's double the cap.
		byteptr ::= (a->ptr)@u8&;
		offset ::= byteptr at (a->cap);
		VirtualAlloc(offset@_, a->cap, MEM_COMMIT, PAGE_READWRITE);
		(a->cap) = (a->cap) * 2;
	}
	if static(__is_linux)
	{
		__error("_arena_double_capacity linux support NYI");
	}
};

arena_push ::= func(a : arena mut&, bytes : u64) -> v0& weak
{
	while(((a->cursor) + bytes) > (a->cap))
	{
		_arena_double_capacity(a);
	}
	addr : u64 mut := (a->ptr)@u64;
	addr = addr + (a->cursor);
	(a->cursor) = (a->cursor) + bytes;

	return addr@v0&;
};

arena_push_one ::= macro(ar : arena mut&, T : auto) -> v0& weak
{
	yield arena_push(ar, __sizeof(T));
};

arena_push_n ::= macro(ar : arena mut&, T : auto, count : u64 weak) -> auto
{
	yield arena_push(ar, __sizeof(T) * count);
};

arena_clear ::= func(a : arena mut&) -> v0
{
	(a->cursor) = 0;
};

arena_destroy ::= func(a : arena) -> v0
{
	if static(__is_windows)
	{
		VirtualFree(a.ptr, 0, MEM_RELEASE);
	}
	if static(__is_linux)
	{
		__error("arena_destroy linux support NYI");
	}
};

== build ==
{
	if static(__is_windows)
	{
		add_link_library("Kernel32.lib");
	}
}
