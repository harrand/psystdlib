GetStdHandle ::= func(handle : u32 -> u64) := extern;
WriteConsoleA ::= func(hConsoleOutput : u64, lpBuffer : u8&, write_count : u32, chars_written : u32 mut& weak, reserved : v0& -> s32) := extern;

putchar ::= func(char : u8 -> v0)
{
	chr ::= char;
	WriteConsoleA(GetStdHandle(4294967285@u32), ref chr, 1@u32, zero, zero);
};

putuint ::= func(i : u64 weak -> v0)
{
	if(i > 9)
	{
		putuint(i / 10);
	}
	digit ::= i - ((i / 10) * 10);
	putchar('0' + digit);
};

putsint ::= func(i : s64 weak -> v0)
{
	if(i < 0)
	{
		putchar('-');
		putuint(-i);
	}
	else
	{
		putuint(i);
	}
};
	
putfloat ::= func(f: f64 weak -> v0)
{
	if (f < 0.0)
	{
		putchar('-');
		putfloat(-f);
		return;
	}

	// Multiply first, then add 0.5 to round, then cast to integer
	scaled ::= (f * 100.0 + 0.5)@s64;

	int_part ::= scaled / 100;
	decimal_part ::= scaled % 100;

	putuint(int_part);
	putchar('.');

	if (decimal_part < 10)
	{
		putchar('0'); // pad single-digit decimals (e.g., ".09")
	}
	putuint(decimal_part);
};
