static if(_win32)
{
	GetFileAttributesA ::= func(lpFileName : u8? -> u32) := extern;
	CreateFileA ::= func(
		lpFileName : u8?,
		dwDesiredAccess : u32,
		dwShareMode : u32,
		lpSecurityAttributes : u64,
		dwCreationDisposition : u32,
		dwFlagsAndAttributes : u32,
		hTemplateFile : u64
		-> u64) := extern;
	GetFileSizeEx ::= func(hFile : u64, lpFileSize : s64 mut? -> s32) := extern;
	CloseHandle ::= func(hObject : u64 -> s32) := extern;
	ReadFile ::= func(
		hFile : u64,
		lpBuffer : u8 mut?,
		nNumberOfBytesToRead : u32,
		lpNumberOfBytesRead : u32 mut?,
		lpOverlapped : u64
		-> s32) := extern;
	WriteFile ::= func(
		hFile : u64,
		lpBuffer : u8?,
		nNumberOfBytesToWrite : u32,
		lpNumberOfBytesWritten : u32 mut?,
		lpOverlapped : u64
		-> s32) := extern;
	DeleteFileA ::= func(lpFileName : u8? -> s32) := extern;
	CreateDirectoryA ::= func(lpPathName : u8?, lpSecurityAttributes : u64 -> s32) := extern;

	SHFILEOPSTRUCTA ::= struct
	{
		hwnd : u64;
		wFunc : u32;
		pFrom : u8?;
		pTo : u8?;
		fFlags : s32;
		fAnyOperationsAborted : s32;
		hNameMappings : v0?;
		lpszProgressTitle : u8?;
	};

	// Shell32.lib
	SHFileOperationA ::= func(lpFileOp : SHFILEOPSTRUCTA? -> s32) := extern;

	FILETIME ::= struct
	{
		dwLowDateTime : u32;
		dwHighDateTime : u32;
	};

	WIN32_FIND_DATAA ::= struct
	{
		dwFileAttributes : u32;
		ftCreationTime : FILETIME;
		ftLastAccessTime : FILETIME;
		ftLastWriteTime : FILETIME;
		nFileSizeHigh : u32;
		nFileSizeLow : u32;
		dwReserved0 : u32;
		dwReserved1 : u32;
		cFileName : u8[260];
		cAlternateFileName : u8[14];
		dwFileType : u32;
		dwCreatorType : u32;
		wFinderFlags : u32;
	};

	FindFirstFileA ::= func(lpFileName : u8?, lpFindFileData : WIN32_FIND_DATAA mut? -> u64) := extern;
	FindNextFileA ::= func(hFindFile : u64, lpFindFileData : WIN32_FIND_DATAA mut? -> s32) := extern;
	FindClose ::= func(hFindFile : u64 -> s32) := extern;
}

file_exists ::= func(path_zstr : u8? -> bool)
{
	static if(_win32)
	{
		handle ::= CreateFileA(path_zstr, 2147483648, 3, 0, 3, 128, 0);
		if(handle == -1)
		{
			return false;
		}
		CloseHandle(handle);
		return true;
	}
	else
	{
		__error("file_exists NYI on linux");
	}
};

file_size_bytes ::= func(path : u8? -> u64)
{
	static if(_win32)
	{
		// CreateFile in this context is cheap, don't worry.
		handle ::= CreateFileA(path, 2147483648, 3, 0, 3, 128, 0);
		if(handle == -1)
		{
			// probably file didnt exist.
			return 0;
		}

		size : s64 mut;
		if(GetFileSizeEx(handle, ref size) == 0)
		{
			// failed for some reason.
			CloseHandle(handle);
			return 0;
		}
		CloseHandle(handle);
		return size@_;
	}
	else
	{
		__error("file_size_bytes NYI on linux");
	}
};

file_read ::= func(path : u8?, buf : u8 mut?, buflen : u64 -> v0)
{
	static if(_win32)
	{
		handle ::= CreateFileA(path, 2147483648, 3, 0, 3, 128, 0);
		if(handle == -1)
		{
			return;
		}

		defer CloseHandle(handle);
		ReadFile(handle, buf, buflen@_, zero, 0);
	}
	else
	{
		__error("file_read NYI on linux");
	}
};

file_write ::= func(path : u8?, buf : u8?, buflen : u64 -> v0)
{
	static if(_win32)
	{
		handle ::= CreateFileA(path, 1073741824, 3, 0, 3, 128, 0);
		defer CloseHandle(handle);
		if(handle == -1)
		{
			return;
		}

		WriteFile(handle, buf, buflen@_, zero, 0);
	}
	else
	{
		__error("file_write NYI on linux");
	}
};

file_create ::= func(path : u8? -> bool)
{
	static if(_win32)
	{
		handle ::= CreateFileA(path, 1073741824, 3, 0, 1, 128, 0);
		if(handle == -1)
		{
			return false;
		}
		CloseHandle(handle);
		return true;
	}
	else
	{
		__error("file_create NYI on linux");
	}
};

file_delete ::= func(path : u8? -> bool)
{
	static if(_win32)
	{
		return DeleteFileA(path) != 0;
	}
	else
	{
		__error("file_delete NYI on linux");
	}
};

directory_create ::= func(path : u8? -> bool)
{
	static if(_win32)
	{
		return CreateDirectoryA(path, 0) != 0;
	}
	else
	{
		__error("directory_create NYI on linux");
	}
};

directory_delete ::= func(path : u8?, a : arena mut? -> bool)
{
	static if(_win32)
	{
		// note: pFrom must be *double* null terminated.
		// pain.
		strlen ::= zstrlen(path);
		pathbuf : u8 mut? := arena_alloc(a, strlen + 2);
		strcpy_n(pathbuf, path, strlen);
		deref(pathbuf # strlen) = 0;
		deref(pathbuf # (strlen + 1)) = 0;

		file_op ::= SHFILEOPSTRUCTA
		{
			.hwnd := 0;
			.wFunc := 3;
			.pFrom := pathbuf;
			.pTo := "";
			.fFlags := 0x0414;
			.fAnyOperationsAborted := 0;
			.hNameMappings := zero;
			.lpszProgressTitle := "";

		};
		return SHFileOperationA(ref file_op) == 0;
	}
	else
	{
		__error("directory_delete NYI on linux");
	}
};

static if(_win32)
{
	_dir_iter ::= func(find : WIN32_FIND_DATAA mut?, callback : func(path : u8? -> v0) -> v0)
	{
		if(!streql_n(find->cFileName # 0, ".", 1) && !streql_n(find->cFileName # 0, "..", 2))
		{
			callback(find->cFileName # 0);
		}
	};
}

directory_iterate ::= func(path : u8?, callback : func(path : u8? -> v0), a : arena mut? -> v0)
{
	static if(_win32)
	{
		// we're given a directory name
		// we want to search dirname/*
		bufsize : u64 mut;
		bufsize = zstrlen(path) + 2;
		buf : u8 mut? mut;
		buf = arena_alloc(a, bufsize);
		strcpy_n(buf, path, bufsize - 2);
		deref(buf # (bufsize - 2)) = '/';
		deref(buf # (bufsize - 1)) = '*';

		find : WIN32_FIND_DATAA mut;
		handle : u64 mut;
		handle = FindFirstFileA(buf, ref find);
		if(handle == -1)
		{
			return;
		}
		_dir_iter(ref find, callback);
		while(FindNextFileA(handle, ref find) != 0)
		{
			_dir_iter(ref find, callback);
		}
		FindClose(handle);
	}
	else
	{
		__error("directory_delete NYI on linux");
	}
};
